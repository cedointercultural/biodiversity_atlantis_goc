fishbase.data.1
fishbase.data %>% lapply(function(t) dim(t) [1]) %>% unlist %>%
which.max
which.max(n.rows)
fishbase.data.1 <- fishbase.data[[n.rows]]
n.rows = fishbase.data %>% lapply(function(t) dim(t) [1]) %>% unlist %>%
which.max
fishbase.data.1 <- fishbase.data[[n.rows]]
fishbase.data.1
fishbase.data[,4]
fishbase.data.1[,4]
fishbase.data.1[,3]
fishbase.data.1[,1]
fishbase.coordinates$Species = paste(genus,species,sep=" ")
fishbase.coordinates
fishbase.coordinates <- data.frame(fishbase.data.1[,4],fishbase.data.1[,3])
fishbase.coordinates %>% mutate_each(funs(as.numeric)) %>% mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Long","Lat","Species")) %>% select(Species, Lat, Long)
fishbase.coordinates %>% tbl_df %>%
mutate_each(funs(as.numeric)) %>%
mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Long","Lat","Species")) %>% select(Species, Lat, Long) %>%
na.omit
fishbase.coordinates <- data.frame(fishbase.data.1[,4],fishbase.data.1[,3])
fishbase.coordinates %>% tbl_df %>%
#mutate_each(funs(as.numeric)) %>%
mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Long","Lat","Species")) %>% select(Species, Lat, Long) %>%
na.omit
fishbase.data.2 = fishbase.coordinates %>% tbl_df %>%
#mutate_each(funs(as.numeric)) %>%
mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Long","Lat","Species")) %>% select(Species, Lat, Long) %>%
na.omit
fishbase.data.2
head(fishing.coordinates)
head(fisbase.coordinates)
head(fishbase.coordinates)
fishbase.coordinates %>% na.omit %>% tbl_df
n.rows
length(fishbase.coordinates)
nrow(fishbase.coordinates)
ishbase.coordinates %>% [2:nrow(.),]
fishbase.coordinates %>% [2:nrow(.),]
fishbase.coordinates %>% .[2:nrow,]
fishbase.coordinates %>% na.omit %>% [2:nrow,]
fishbase.coordinates %>% na.omit %>% .[2:nrow,]
fishbase.coordinates %>% na.omit
fishbase.data.2 = fishbase.coordinates %>% na.omit %>% tbl_df %>%
mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Long","Lat","Species")) %>% select(Species, Lat, Long)
fishbase.data.2
fishbase.data.3 = fishbase.data.2[2:nrow(fishbase.data.2),]
fishbase.data.3
url <- "http://www.fishbase.org/map/EcosystemOccurrencesList.php?e_code=165"
site = 165
url <- paste("http://www.fishbase.org/map/EcosystemOccurrencesList.php?e_code=",
site,sep="")
fishbase.data <- try(readHTMLTable(url),silent=TRUE)
fishbase.data
genus <- "Sphyrna"
species <- "lewini"
# Get records from FishBase ###########################################################
url <- paste("http://www.fishbase.org/Map/OccurrenceMapList.php?showAll=yes&genus=",
genus,"&species=",species,sep="")
fishbase.data <- try(readHTMLTable(url),silent=TRUE)
n.rows = fishbase.data %>% lapply(function(t) dim(t) [1]) %>% unlist %>%
which.max
fishbase.data.1 <- fishbase.data[[n.rows]]
fishbase.coordinates <- data.frame(fishbase.data.1[,1],fishbase.data.1[,4],fishbase.data.1[,3])
fishbase.coordinates
head(fishbase.coordinates)
fishbase.data.1[,1]
fishbase.coordinates <- data.frame(fishbase.data.1[,1],fishbase.data.1[,3],fishbase.data.1[,4])
head(fishbase.coordinates)
fishbase.data.1[,1]
fishbase.data.1[,3]
fishbase.data.1[,4]
data.frame(fishbase.data.1[,1]
fishbase.data.1[,1]
fishbase.coordinates <- data.frame(fishbase.data.1[,3],fishbase.data.1[,4])
fishbase.coordinates <- data.frame(fishbase.data.1[,3],fishbase.data.1[,4])
fishbase.data.2 = fishbase.coordinates %>% na.omit %>% tbl_df %>%
mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Lat","Long","Species"))
fishbase.data.2
data.frame(fishbase.data.1[,1])
data.frame(fishbase.data.1[,2])
data.frame(fishbase.data.1[,3])
data.frame(fishbase.data.1[,4])
fishbase.coordinates <- data.frame(fishbase.data.1[,1],fishbase.data.1[,3],fishbase.data.1[,4])
fishbase.coordinates
str(fishbase.coordinates)
names = data.frame(fishbase.data.1[,1])
names
str(names)
names = fishbase.data.1[,1] %>% as.character %>% data.frame
str(names)
fishbase.data.1[,1] %>% as.character
names = fishbase.data.1[,1] %>% as.character %>% as.data.frame
names
str(names)
fishbase.data.1[,1] %>% as.character
names = fishbase.data.1[,1] %>% as.character
names
names = fishbase.data.1[,1] %>% as.character %>% data.frame
names
str(names)
head(names)
names.1 = names[6:nrow(names),]
names.1
head(names.1)
names = fishbase.data.1[,1] %>% as.character
names.1 = names[6:nrow(names),]
names = fishbase.data.1[,1] %>% as.character
head(names)
fishbase.data.1[,1] %>% as.character
names = fishbase.data.1[,1] %>% as.character %>% data.frame
names.1 = names[6:nrow(names),]
head(names.1)
names = fishbase.data.1[,1] %>% .[7:nrow(fishbase.data.1),]
fishbase.data.1[7:nrow(fishbase.data.1),1]
names = fishbase.data.1[7:nrow(fishbase.data.1),1]
names
names = fishbase.data.1[8:nrow(fishbase.data.1),1] %>% as.character
names
class(names)
names = fishbase.data.1[8:nrow(fishbase.data.1),1] %>% as.character %>%
data.frame
class(names)
str(names)
edit(names)
names = fishbase.data.1[8:nrow(fishbase.data.1),1] %>% as.character %>% tolower
names
if(!require(Hmisc)){install.packages("Hmisc"); library(Hmisc)}
fishbase.data.1[8:nrow(fishbase.data.1),1] %>% as.character %>% tolower %>%
capitalize
genus <- "Sphyrna"
species <- "lewini"
# Get records from FishBase ###########################################################
url <- paste("http://www.fishbase.org/Map/OccurrenceMapList.php?showAll=yes&genus=",
genus,"&species=",species,sep="")
url
#'Hem Nalini Morzaria Luna
#'hmorzarialuna@gmail.com
#'Based on R script by Miguel Gandra || m3gandra@gmail.com || April 2015
#'
#'clean up the space
rm(list=ls())
#' Automatically install required libraries
if(!require(dismo)){install.packages("dismo"); library(dismo)}
if(!require(XML)){install.packages("XML"); library(XML)}
if(!require(jsonlite)){install.packages("jsonlite"); library(jsonlite)}
if(!require(graphics)){install.packages("graphics"); library(graphics)}
if(!require(maps)){install.packages("maps"); library(maps)}
if(!require(maptools)){install.packages("maptools"); library(maptools)}
if(!require(rgeos)){install.packages("rgeos"); library(rgeos)}
if(!require(rgdal)){install.packages("rgdal"); library(rgdal)}
if(!require(magrittr)){install.packages("magrittr"); library(magrittr)}
if(!require(dplyr)){install.packages("dplyr"); library(dplyr)}
if(!require(Hmisc)){install.packages("Hmisc"); library(Hmisc)}
#' Variables
genus <- "Sphyrna"
species <- "lewini"
# Get records from FishBase ###########################################################
url <- paste("http://www.fishbase.org/Map/OccurrenceMapList.php?showAll=yes&genus=",
genus,"&species=",species,sep="")
fishbase.data <- try(readHTMLTable(url),silent=TRUE)
if(class(fishbase.data)=="try-error"){
fishbase.coordinates<-data.frame(matrix(ncol=2, nrow=0))
stop("FishBase data download failed")
}else{
n.rows = fishbase.data %>% lapply(function(t) dim(t) [1]) %>% unlist %>%
which.max
fishbase.data.1 <- fishbase.data[[n.rows]]
fishbase.coordinates <- data.frame(names,fishbase.data.1[,3],fishbase.data.1[,4])
fishbase.data.2 = fishbase.coordinates %>% na.omit %>% tbl_df %>%
mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Lat","Long","Species"))
fishbase.data.3 = fishbase.data.2[2:nrow(fishbase.data.2),]
}
fishbase.data <- try(readHTMLTable(url),silent=TRUE)
if(class(fishbase.data)=="try-error"){
fishbase.data <- try(readHTMLTable(url),silent=TRUE)
if(class(fishbase.data)=="try-error"){
url <- paste("http://www.fishbase.org/Map/OccurrenceMapList.php?showAll=yes&genus=",
genus,"&species=",species,sep="")
url
fishbase.data <- try(readHTMLTable(url),silent=TRUE)
fishbase.data <- try(readHTMLTable(url),silent=FALSE)
url <- paste("http://www.fishbase.org/Map/OccurrenceMapList.php?showAll=yes&genus=",
genus,"&species=",species,"&dsource=darwin_all_v2",sep="")
url
fishbase.data <- try(readHTMLTable(url),silent=FALSE)
url <- paste("http://www.fishbase.org/Map/OccurrenceMapList.php?genus=",
genus,"&species=",species,"&dsource=darwin_all_v2",sep="")
url
fishbase.data <- try(readHTMLTable(url),silent=FALSE)
url <- paste("http://www.fishbase.org/Map/OccurrenceMapList.php?genus=",
genus,"&species=",species,"&dsource=darwin_all_v2",sep="")
fishbase.data <- try(readHTMLTable(url),silent=FALSE)
if(class(fishbase.data)=="try-error"){
fishbase.coordinates<-data.frame(matrix(ncol=2, nrow=0))
stop("FishBase data download failed")
}else{
n.rows = fishbase.data %>% lapply(function(t) dim(t) [1]) %>% unlist %>%
which.max
fishbase.data.1 <- fishbase.data[[n.rows]]
fishbase.coordinates <- data.frame(names,fishbase.data.1[,3],fishbase.data.1[,4])
fishbase.data.2 = fishbase.coordinates %>% na.omit %>% tbl_df %>%
mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Lat","Long","Species"))
fishbase.data.3 = fishbase.data.2[2:nrow(fishbase.data.2),]
}
fishbase.coordinates <- data.frame(fishbase.data.1[,3],fishbase.data.1[,4])
fishbase.data.2 = fishbase.coordinates %>% na.omit %>% tbl_df %>%
mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Lat","Long","Species"))
fishbase.data.2
fishbase.data.2 = fishbase.coordinates %>% na.omit %>% tbl_df %>%
mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Lat","Long","Species")) %>% select(Species,Lat,Long)
fishbase.data.2
fishbase.data.3 = fishbase.data.2[2:nrow(fishbase.data.2),]
fishbase.data.3
site = 165
url <- paste("http://www.fishbase.org/map/EcosystemOccurrencesList.php?e_code=",
site,sep="")
fishbase.data <- try(readHTMLTable(url),silent=TRUE)
n.rows = fishbase.data %>% lapply(function(t) dim(t) [1]) %>% unlist %>%
which.max
fishbase.data.1 <- fishbase.data[[n.rows]]
head(fishbase.data.1)
str(fishbase.data.1)
fishbase.data.1
fishbase.data
fishbase.data[[1]]
fishbase.data[[2]]
fishbase.data[[3]]
fishbase.data.1 = fishbase.data[[3]] %>% data.frame
fishbase.data.1
str(fishbase.data.1)
head(fishbase.data.1)
fishbase.coordinates <- data.frame(fishbase.data.1[,2], fishbase.data.1[,5],fishbase.data.1[,6])
str(fishbase.coordinates)
fishbase.coordinates %>% setNames(c("Species","Lat","Long")) %>%
mutate(Lat:Long,funs(as.numeric))
fishbase.coordinates %>% setNames(c("Species","Lat","Long")) %>%
mutate(Lat=as.numeric(Lat))
fishbase.coordinates %>% setNames(c("Species","Lat","Long")) %>%
mutate(Lat=as.character(Lat)) %>%  mutate(Lat=as.numeric(Lat))
fishbase.coordinates %>% setNames(c("Species","Lat","Long")) %>%
mutate(Lat=as.character(Lat)) %>%  mutate(Lat=as.numeric(Lat)) %>%
mutate(Long=as.character(Long)) %>%  mutate(Long=as.numeric(Long))
fishbase.coordinates.1 = fishbase.coordinates %>% setNames(c("Species","Lat","Long")) %>%
mutate(Lat=as.character(Lat)) %>%  mutate(Lat=as.numeric(Lat)) %>%
mutate(Long=as.character(Long)) %>%  mutate(Long=as.numeric(Long)) %>%
tbl_df
fishbase.coordinates.1
fishbase.coordinates.1$Species
empty_as_na <- function(x) ifelse(x=="", NA, x)
fishbase.coordinates.1 = fishbase.coordinates %>% setNames(c("Species","Lat","Long")) %>%
mutate(Lat=as.character(Lat)) %>%  mutate(Lat=as.numeric(Lat)) %>%
mutate(Long=as.character(Long)) %>%  mutate(Long=as.numeric(Long)) %>%
tbl_df %>% mutate_each(funs(empty_as_na))
dim(fishbase.coordinates.1)
fishbase.coordinates.1 = fishbase.coordinates %>% setNames(c("Species","Lat","Long")) %>%
mutate(Lat=as.character(Lat)) %>%  mutate(Lat=as.numeric(Lat)) %>%
mutate(Long=as.character(Long)) %>%  mutate(Long=as.numeric(Long)) %>%
tbl_df %>% mutate_each(funs(empty_as_na)) %>% na.omit
dim(fishbase.coordinates.1)
rm(list=ls())
#' Automatically install required libraries
if(!require(dismo)){install.packages("dismo"); library(dismo)}
if(!require(XML)){install.packages("XML"); library(XML)}
if(!require(jsonlite)){install.packages("jsonlite"); library(jsonlite)}
if(!require(graphics)){install.packages("graphics"); library(graphics)}
if(!require(maps)){install.packages("maps"); library(maps)}
if(!require(maptools)){install.packages("maptools"); library(maptools)}
if(!require(rgeos)){install.packages("rgeos"); library(rgeos)}
if(!require(rgdal)){install.packages("rgdal"); library(rgdal)}
if(!require(magrittr)){install.packages("magrittr"); library(magrittr)}
if(!require(dplyr)){install.packages("dplyr"); library(dplyr)}
if(!require(Hmisc)){install.packages("Hmisc"); library(Hmisc)}
#' Variables
genus <- "Sphyrna"
species <- "lewini"
# Get records from FishBase ###########################################################
url <- paste("http://www.fishbase.org/Map/OccurrenceMapList.php?genus=",
genus,"&species=",species,"&dsource=darwin_all_v2",sep="")
fishbase.data <- try(readHTMLTable(url),silent=FALSE)
if(class(fishbase.data)=="try-error"){
fishbase.coordinates<-data.frame(matrix(ncol=2, nrow=0))
stop("FishBase data download failed")
}else{
n.rows = fishbase.data %>% lapply(function(t) dim(t) [1]) %>% unlist %>%
which.max
fishbase.data.1 <- fishbase.data[[n.rows]]
#' define a helper function to replace empty values
empty_as_na <- function(x) ifelse(x=="", NA, x)
fishbase.coordinates <- data.frame(fishbase.data.1[,3],fishbase.data.1[,4])
fishbase.data.2 = fishbase.coordinates %>% mutate_each(funs(empty_as_na)) %>%
na.omit %>% tbl_df %>%
mutate(Species = paste(genus,species,sep=" ")) %>%
setNames(c("Lat","Long","Species")) %>% select(Species,Lat,Long)
fishbase.data.3 = fishbase.data.2[2:nrow(fishbase.data.2),]
}
write.csv(fishbase.data.3,file=paste(genus,species,".csv",sep="_"))
fishbase.data.3
getwd()
workpath = "E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/RCode"
setwd(workpath)
workpath
site = 165
url <- paste("http://www.fishbase.org/map/EcosystemOccurrencesList.php?e_code=",
site,sep="")
fishbase.data <- try(readHTMLTable(url),silent=TRUE)
fishbase.data.1 = fishbase.data[[3]] %>% data.frame
fishbase.coordinates <- data.frame(fishbase.data.1[,2], fishbase.data.1[,5],fishbase.data.1[,6])
#' define a helper function to replace empty values
empty_as_na <- function(x) ifelse(x=="", NA, x)
fishbase.coordinates.1 = fishbase.coordinates %>% setNames(c("Species","Lat","Long")) %>%
mutate(Lat=as.character(Lat)) %>%  mutate(Lat=as.numeric(Lat)) %>%
mutate(Long=as.character(Long)) %>%  mutate(Long=as.numeric(Long)) %>%
tbl_df %>% mutate_each(funs(empty_as_na)) %>% na.omit
package.list = c("Hmisc","dplyr")
for(eachpackage in 1:length(package.list)){
package.lib = package.list[eachpackage]
if(!require(package.lib)){install.packages(package.lib); library(package.lib)}
}
if(!require(package.lib)){install.packages(paste(package.lib)); library(paste(package.lib))}
install.packages(paste(package.lib))
#'Hem Nalini Morzaria Luna
#'hmorzarialuna@gmail.com
#'Based on R script by Miguel Gandra || m3gandra@gmail.com || April 2015
#'
#'clean up the space
rm(list=ls())
#' Automatically install required libraries
if(!require(dismo)){install.packages("dismo"); library(dismo)}
if(!require(XML)){install.packages("XML"); library(XML)}
if(!require(jsonlite)){install.packages("jsonlite"); library(jsonlite)}
if(!require(graphics)){install.packages("graphics"); library(graphics)}
if(!require(maps)){install.packages("maps"); library(maps)}
if(!require(maptools)){install.packages("maptools"); library(maptools)}
if(!require(rgeos)){install.packages("rgeos"); library(rgeos)}
if(!require(rgdal)){install.packages("rgdal"); library(rgdal)}
if(!require(magrittr)){install.packages("magrittr"); library(magrittr)}
if(!require(dplyr)){install.packages("dplyr"); library(dplyr)}
if(!require(Hmisc)){install.packages("Hmisc"); library(Hmisc)}
if(!require(spocc)){install.packages("spocc"); library(spocc)}
workpath = "E:/Archivos/1Archivos/Articulos/En preparacion/Vulnerability_GOC_Pacific/Analysis/RCode"
polygons=c('POLYGON((-115.16 31.49, -113.17 31.49, -113.17 31.97, -115.16 31.97, -115.16 31.49))',
'POLYGON((-115.16 31.49, -113.17 31.49, -113.17 31.15, -115.16 31.15, -115.16 31.49))',
'POLYGON((-115.16 31.34, -112.95 31.34, -112.95 31.0, -115.16 31.0, -115.16 31.34))',
'POLYGON((-115.16 31.19, -112.86 31.19, -112.86 30.81, -115.16 30.81, -115.16 31.19))',
'POLYGON((-115.12 31.0, -112.82 31.0, -112.82 30.62, -115.12 30.62, -115.12 31.0))',
'POLYGON((-115.12 30.85, -112.82 30.85, -112.82 30.47, -115.12 30.47, -115.12 30.85))',
'POLYGON((-115.1 30.75, -112.8 30.75, -112.8 30.37, -115.1 30.37, -115.1 30.75))',
'POLYGON((-115.07 30.66, -112.77 30.66, -112.77 30.28, -115.07 30.28, -115.07 30.66))',
'POLYGON((-114.96 30.6, -112.66 30.6, -112.66 30.22, -114.96 30.22, -114.96 30.6))',
'POLYGON((-114.94 30.47, -112.64 30.47, -112.64 30.09, -114.94 30.09, -114.94 30.47))',
'POLYGON((-114.94 30.35, -112.64 30.35, -112.64 29.98, -114.94 29.98, -114.94 30.35))',
'POLYGON((-114.7229 30.2337, -112.5989 30.2337, -112.5989 30.0096, -114.7229 30.0096, -114.7229 30.2337))',
'POLYGON((-114.635 29.9956, -112.511 29.9956, -112.511 29.8102, -114.635 29.8102, -114.635 29.9956))',
'POLYGON((-114.5252 29.8717, -112.4011 29.8717, -112.4011 29.6863, -114.5252 29.6863, -114.5252 29.8717))',
'POLYGON((-114.4593 29.7858, -112.3352 29.7858, -112.3352 29.6005, -114.4593 29.6005, -114.4593 29.7858))',
'POLYGON((-114.4043 29.7094, -112.2803 29.7094, -112.2803 29.5241, -114.4043 29.5241, -114.4043 29.7094))',
'POLYGON((-114.2395 29.6426, -112.2803 29.6426, -112.2803 29.4572, -114.2395 29.4572, -114.2395 29.6426))',
'POLYGON((-114.1736 29.5565, -112.2143 29.5565, -112.2143 29.3712, -114.1736 29.3712, -114.1736 29.5565))',
'POLYGON((-114.1297 29.4991, -112.1704 29.4991, -112.1704 29.3138, -114.1297 29.3138, -114.1297 29.4991))',
'POLYGON((-114.1297 29.4991, -112.1704 29.4991, -112.1704 29.1892, -114.1297 29.1892, -114.1297 29.4991))',
'POLYGON((-113.8001 28.866, -111.9946 28.866, -111.9946 29.1892, -113.8001 29.1892, -113.8001 28.866))',
'POLYGON((-113.5804 28.866, -111.4673 28.866, -111.4673 28.419, -113.5804 28.419, -113.5804 28.866))',
'POLYGON((-112.9981 27.948, -110.8411 27.948, -110.8411 28.419, -112.9981 28.419, -112.9981 27.948))',
'POLYGON((-112.9981 27.948, -110.3467 27.948, -110.3467 27.3508, -112.9981 27.3508, -112.9981 27.948))',
'POLYGON((-112.4048 26.7576, -109.6875 26.7576, -109.6875 27.3508, -112.4048 27.3508, -112.4048 26.7576))',
'POLYGON((-112.0423 26.7576, -108.8415 26.7576, -108.8415 26.1737, -112.0423 26.1737, -112.0423 26.7576))',
'POLYGON((-111.6028 25.5347, -108.6877 25.5347, -108.6877 26.1737, -111.6028 26.1737, -111.6028 25.5347))',
'POLYGON((-111.2293 25.5347, -107.7319 25.5347, -107.7319 24.6256, -111.2293 24.6256, -111.2293 25.5347))',
'POLYGON((-110.9656 24.4394, -106.5344 24.4394, -106.5344 24.6256, -110.9656 24.6256, -110.9656 24.4394))',
'POLYGON((-110.9656 24.3694, -106.5344 24.3694, -106.5344 24.5556, -110.9656 24.5556, -110.9656 24.3694))',
'POLYGON((-110.9546 24.2893, -107.0288 24.2893, -107.0288 24.5056, -110.9546 24.5056, -110.9546 24.2893))',
'POLYGON((-110.9546 24.2293, -107.0288 24.2293, -107.0288 24.4456, -110.9546 24.4456, -110.9546 24.2293))',
'POLYGON((-110.9436 24.1692, -107.0178 24.1692, -107.0178 24.3855, -110.9436 24.3855, -110.9436 24.1692))',
'POLYGON((-110.9436 24.1191, -107.0178 24.1191, -107.0178 24.3354, -110.9436 24.3354, -110.9436 24.1191))',
'POLYGON((-110.7569 24.049, -106.831 24.049, -106.831 24.2653, -110.7569 24.2653, -110.7569 24.049))',
'POLYGON((-110.2515 23.9888, -106.7761 23.9888, -106.7761 24.175, -110.2515 24.175, -110.2515 23.9888))',
'POLYGON((-110.2185 23.9287, -106.7432 23.9287, -106.7432 24.1148, -110.2185 24.1148, -110.2185 23.9287))',
'POLYGON((-110.2185 23.8382, -106.7432 23.8382, -106.7432 24.0446, -110.2185 24.0446, -110.2185 23.8382))',
'POLYGON((-110.1197 23.7177, -106.6443 23.7177, -106.6443 23.9241, -110.1197 23.9241, -110.1197 23.7177))',
'POLYGON((-110.1087 23.6674, -106.6333 23.6674, -106.6333 23.8738, -110.1087 23.8738, -110.1087 23.6674))',
'POLYGON((-110.0977 23.5366, -106.5015 23.5366, -106.5015 23.7632, -110.0977 23.7632, -110.0977 23.5366))',
'POLYGON((-109.7791 23.4158, -106.4136 23.4158, -106.4136 23.6524, -109.7791 23.6524, -109.7791 23.4158))',
'POLYGON((-109.7791 23.315, -106.4136 23.315, -106.4136 23.5516, -109.7791 23.5516, -109.7791 23.315))',
'POLYGON((-109.7351 23.1738, -106.2158 23.1738, -106.2158 23.4609, -109.7351 23.4609, -109.7351 23.1738))',
'POLYGON((-110.0318 23.1233, -106.062 23.1233, -106.062 22.8953, -110.0318 22.8953, -110.0318 23.1233))',
'POLYGON((-109.9659 22.9209, -105.4687 22.9209, -105.4687 22.6828, -109.9659 22.6828, -109.9659 22.9209))',
'POLYGON((-109.9659 22.7792, -105.227 22.7792, -105.227 22.2157, -109.9659 22.2157, -109.9659 22.7792))',
'POLYGON((-109.9659 21.7829, -105.1611 21.7829, -105.1611 22.2259, -109.9659 22.2259, -109.9659 21.7829))',
'POLYGON((-109.9659 21.7829, -105.0403 21.7829, -105.0403 21.2871, -109.9659 21.2871, -109.9659 21.7829))',
'POLYGON((-109.9659 20.8002, -105.0403 20.8002, -105.0403 21.2871, -109.9659 21.2871, -109.9659 20.8002))',
'POLYGON((-109.9659 20.8002, -105.0403 20.8002, -105.0403 20.2703, -109.9659 20.2703, -109.9659 20.8002))')
eachpolygon = polygons[1]
eachpolygon
occ(geometry = eachpolygon, from = "gbif", limit=50)
gbif.res = occ(geometry = eachpolygon, from = "gbif", limit=50)
gbif.res
class(gbif.res)
gbif.res$gbif
gbif.res = occ(geometry = eachpolygon, from = c("gbif","bison","ebird","antweb"), limit=50)
gbif.res = occ(geometry = eachpolygon, from = c("gbif","bison","ebird"), limit=50)
gbif.res$bison
gbif.res$ebird
gbif.res = occ(geometry = eachpolygon, from = c("gbif","bison","ebird","ecoengine"), limit=50)
gbif.res$ecoengine
gbif.res$ebird
gbif.res = occ(geometry = eachpolygon, from = c("idigbio","vertnet","gbif","bison","ebird","ecoengine"), limit=50)
?occ
install_github("ropensci/spocc")
library("devtools", lib.loc="~/R/win-library/3.2")
install_github("ropensci/spocc")
install_github("ropensci/spocc")
library(spocc)
?occ
library(spocc)
gbif.res = occ(geometry = eachpolygon, from = c("idigbio","vertnet","gbif","bison","ebird","ecoengine"), limit=50)
occ()
occ
df <- idig_search_records(rq=list(genus="acer", geopoint=list(type="exists")),
fields=c("uuid", "geopoint"), limit=10)
install.packages("ridigbio")
df <- idig_search_records(rq=list(genus="acer", geopoint=list(type="exists")),
fields=c("uuid", "geopoint"), limit=10)
library(ridigbio)
df <- idig_search_records(rq=list(genus="acer", geopoint=list(type="exists")),
fields=c("uuid", "geopoint"), limit=10)
df
df <- idig_search_records(rq=list(genus="acer", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=10)
df
df <- idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=10)
df
df <- idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=5000)
df
??idig_search_records
df2 <- idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=5000,offset =5000)
dim(df2)
idig_count_records(idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"))
)
?idig_count_records
df1 <- idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=5000)
df2 <- idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=5000,offset =5000)
df3 <- idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=5000,offset =10000)
df4 <- idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=5000,offset =15000)
df4
names(df1)
setNames(biodiversity,c("scientificname","geopoint.lon","geopoint.lat")
)
biodiversity = as.data.frame(matrix(0,nrow=0,ncol=3))
setNames(biodiversity,c("scientificname","geopoint.lon","geopoint.lat"))
biodiversity = matrix(0,nrow=0,ncol=3) %>% as.data.frame %>%
setNames(c("scientificname","geopoint.lon","geopoint.lat"))
biodiversity
for(eachnumber in 1:10){
thisoffset = 5000*eachnumber
df1 <- idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=thisoffset)
rbind(biodiversity,df1)
}
biodiversity = matrix(0,nrow=0,ncol=3) %>% as.data.frame %>%
setNames(c("scientificname","geopoint.lon","geopoint.lat"))
for(eachnumber in 1:10){
thisoffset = 5000*eachnumber
df1 <- idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=thisoffset)
biodiversity = rbind(biodiversity,df1)
}
write.csv(biodiversity,file="idigbio_Mexico.csv")
head(biodiversity)
dim(biodiversity)
10*5000
for(eachnumber in 11:20){
thisoffset = 5000*eachnumber
df1 <- idig_search_records(rq=list(country="mexico", geopoint=list(type="exists")),
fields=c("scientificname", "geopoint"), limit=thisoffset)
biodiversity = rbind(biodiversity,df1)
}
dim(biodiversity)
getwd()
workpath = "E:/Archivos/1Archivos/Articulos/En preparacion/Biodiversity_model/Analysis/RCode"
setwd(workpath)
write.csv(biodiversity,file="idigbio_Mexico.csv")
20*5000
install.packages('future')
install.packages('promise')
install.packages('promises')
q()
install.packages('openxlsx')
q()
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='cedo', token='FF07B9758C5EF302FCF4D34FD4745E57', secret='/9PPXgEkuvd+IhBxPqyYcx4hWv9sBrfSr/QmUrcX')
q()
